一.监听器的配置
二.过滤器的配置
三.拦截器的配置


一：拦截器 ：是在面向切面编程的就是在你的service或者一个方法，前调用一个方法，或者在方法后调用一个方法比如动态代理就是拦截器的简单实现，springmvc的aop中的前置通知和后置通知。

二： 过滤器：是在java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，
然后再传入servlet或者struts的 action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,
或者在传入servlet或者struts的action前统一设置字符集，或者去除掉一些非法字符。主要为了减轻服务器负载，减少压力


拦截器和过滤器的区别

1、拦截器是基于java的反射机制的，而过滤器是基于函数回调
2、过滤器依赖与servlet容器，而拦截器不依赖与servlet容器
3、拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用
4、拦截器可以访问action上下文、值栈里的对象，而过滤器不能
5、在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次
在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次
执行顺序 ：过滤前 - 拦截前 - Action处理 - 拦截后 - 过滤后。
个人认为过滤是一个横向的过程，首先把客户端提交的内容进行过滤(例如未登录用户不能访问内部页面的处理)；
过滤通过后，拦截器将检查用户提交数据的验证，做一些前期的数据处理，接着把处理后的数据发给对应的Action；
Action处理完成返回后，拦截器还可以做其他过程，再向上返回到过滤器的后续操作。

三：监听器：Servlet的监听器Listener，它是实现了javax.servlet.ServletContextListener
　　         接口的服务器端程序，它也是随web应用的启动而启动，只初始化一次，随web应用的停止而销毁。
 主要作用是：做一些初始化的内容添加工作、设置一些基本的内容、比如一些参数或者是一些固定的对象等等。